Tipos de bases de datos
	-Relacionales: En la industria hay varias compañías dedicadas a ser manejadoras de bases de datos relacionales como SQL Server, Oracle, MariaDB, entre otras. 
	-No relacionales: Todavía están avanzando y existen ejemplos muy distintos como cassandra, elasticsearch, neo4j, MongoDB, entre otras.

Servicios
	-Auto administrados: Es la base de datos que instalas tú y te encargas de actualizaciones, mantenimiento, etc. 
	-Administrados: Servicios que ofrecen las nubes modernas como Azure y no debes preocuparte por mantenimiento o actualizaciones.

Reglas de Codd

Las Reglas y mandamientos de Edgar Frank Ted Codd

Regla 0: Regla de fundación. a) Cualquier sistema que se proclame como relacional, debe ser capaz de gestionar sus bases de datos enteramente mediante sus capacidades relacionales.

Regla 1: Regla de la información. a) Todos los datos deben estar almacenados en las tablas b) Esas tablas deben cumplir las premisas del modelo relacional c) No puede haber información a la que accedemos por otra vía

Regla 2: Regla del acceso garantizado. a) Cualquier dato es accesible sabiendo la clave de su fila y el nombre de su columna o atributo b) Si a un dato no podemos acceder de esta forma, no estamos usando un modelo relacional

Regla 3: Regla del tratamiento sistemático de valores nulos. a) Esos valores pueden dar significado a la columna que los contiene b) El SGBD debe tener la capacidad de manejar valores nulos c) El SGBD reconocerá este valor diferenciándolo de cualquier otro d) El SGBD deberá aplicársele la lógica apropiada e) Es un valor independiente del tipo de datos de la columna

Regla 4: Catálogo dinámico en línea basado en el modelo relacional. a) El catálogo en línea es el diccionario de datos b) El diccionario de datos se debe de poder consultar usando las mismas técnicas que para los datos c) Los metadatos, por tanto, se organizan también en tablas relacionales d) Si SELECT es una instrucción que consulta datos, también será la que consulta los metadatos

Regla 5: Regla comprensiva del sublenguaje de los datos completo. a) Al menos tiene que existir un lenguaje capaz de hacer todas las funciones del SGBD b) No puede haber funciones fuera de ese lenguaje c) Puede haber otros lenguajes en el SGBD para hacer ciertas tareas d) Pero esas tareas también se deben poder hacer con el “lenguaje completo”

Regla 6: Regla de actualización de vistas. a) Las vistas tienen que mostrar información actualizada b) No puede haber diferencias entre los datos de las vistas y los datos de las tablas base

Regla 7: Alto nivel de inserción, actualización, y cancelación. a) La idea es que el lenguaje que maneja la base de datos sea muy humano b) Eso implica que las operaciones del lenguaje de manipulación de los datos (DML) trabajen con conjuntos de filas a la vez c) Para modificar, eliminar o añadir datos, no hará falta programar de la forma en la que lo hacen los lenguajes de tercera generación como C o Java

Regla 8: Independencia física de los datos. a) Cambios en la física de la BD no afecta a las aplicaciones ni a los esquemas lógicos b) El acceso a las tablas (elemento lógico) no cambia porque la física de la base de datos cambie

Regla 9: Independencias lógicas de los datos. a) Cambios en el esquema lógico (tablas) de la BD no afectan al resto de esquemas b) Si cambiamos nombres de tabla, o de columna o modificamos información de las filas, las aplicaciones (esquema externo) no se ven afectadas c) Es más difícil de conseguir

Regla 10: Independencia de la integridad. a) Las reglas de integridad (restricciones) deben de ser gestionadas y almacenadas por el SGBD

Regla 11: Independencia de la distribución. a) Que la base de datos se almacene o gestione de forma distribuida en varios servidores, no afecta al uso de esta ni a la programación de las aplicaciones de usuario b) El esquema lógico es el mismo independientemente de si la BD es distribuida o no

Regla 12: La regla de la no subversión. a) La base de datos no permitirá que exista un lenguaje o forma de acceso, que permita saltarse las reglas anteriores.

*Entidad: Una entidad es algo similar a un objeto (programación orientada a objetos) y representa algo en el mundo real, incluso algo abstracto. Tienen atributos que son las cosas que los hacen ser una entidad, se diagraman dentro de cuadrados y por convención se ponen en plural. Existen tambien:

*Entidad Fuerte: No depende de ninguna entidad para existir

*Entidades débiles: No pueden existir sin una entidad fuerte y se representan con un cuadrado con doble línea.

	-Identidades débiles por identidad: No se diferencian entre sí más que por la clave de su identidad fuerte.
	-Identidades débiles por existencia: Se les asigna una clave propia.

*Atributos: Los atributos se representan con óvalos, los que tienen multiples valores llevan dobles óvalos, también existen atributos compuestos, los atributos especiales son óvalos con linea punteada.

*Los atributos compuestos: son aquellos que tienen atributos ellos mismos.

*Los atributos llave: son aquellos que identifican a la entidad y no pueden ser repetidos, se diagraman con underline. Existen:

	- *Naturales: Son inherentes al objeto como el número de serie
	- *Clave artificial: No es inherente al objeto y se asigna de manera arbitraria

Relaciones: Nos permiten ligar o unir diferentes entidades y se representan graficamente como rombos. Las relaciones tienen una propiedad llamada cardinalidad y tiene que ver con números. Cuántos de un lado pertenecen a cuántos del otro lado:

Cardinalidad: 1 a 1 Cardinalidad: 0 a 1 Cardinalidad: 1 a N Cardinalidad: 0 a N

Tipos de Dato en Bases de Datos y Diagramas:
- Texto: 
	CHAR(n)
	VARCHAR(n)
	TEXT 
- Números: 
	INTEGER 
	BIGINT 
	SMALLINT 
	DECIMAL(n,s) 
	NUMERIC(n,s) 
- Fecha/hora: 
	DATE 
	TIME 
	DATETIME 
	TIMESTAMP 
- Lógicos: 
	BOOLEAN

Tipos de Restricciones (CONSTRAINT)
	- Not Null
	- Unique
	- Primary Key
	- Foreign Key
	- Check
	- Default
	- Index

Normalizacion: nos ayuda a dejar todo de una forma normal. Esto obedece a las 12 reglas de Codd y nos permiten separar componentes en la base de datos.

RDBMS: significa Relational Database Management System o sistema manejador de bases de datos relacionales. Es un programa que se encarga de seguir las reglas de Codd y se puede utilizar de manera programática.

SQL: significa Structured Query Language y tiene una estructura clara y fija. Su objetivo es hacer un solo lenguaje para consultar cualquier manejador de bases de datos volviéndose un gran estándar.

NoSQL: o Not Only Structured Query Language que significa que no sólo se utiliza SQLen las bases de datos no relacionales.

DDL: o Data Definition Language que nos ayuda a crear la estructura de una base de datos. Existen 3 grandes comandos:

	- Create: Nos ayuda a crear bases de datos, tablas, vistas, índices, etc.
	-Alter: Ayuda a alterar o modificar entidades.
	- Drop: Nos ayuda a borrar. Hay que tener cuidado al utilizarlo.

3 objetos que manipularemos con el lenguaje DDL:

	-Database o bases de datos
	-Table o tablas. Son la traducción a SQL de las entidades
	-View o vistas: Se ofrece la proyección de los datos de la base de datos de forma entendible.

DML: trata del contenido de la base de datos. Son las siglas de Data Manipulation Language y sus comandos son:

	- Insert: Inserta o agrega nuevos registros a la tabla. 
	- Update: Actualiza o modifica los datos que ya existen. 
	- Delete: Esta sentencia es riesgosa porque puede borrar el contenido de una tabla. - Select: Trae información de la base de datos.

Tablas Transitivas: Las tablas transitivas sirven como puente para unir dos tablas. No tienen contenido semántico.

Reverse Engineer: nos reproduce el esquema del cual nos basamos para crear nuestras tablas. Es útil cuando llegas a un nuevo trabajo y quieres entender cuál fue la mentalidad que tuvieron al momento de crear las bases de datos.

Query:  son la forma en la que estructuramos las preguntas que se harán a la base de datos. Tiene dos formas: 
	- SELECT:  se encarga de proyectar o mostrar datos.
	- FROM: indica de dónde se deben traer los datos y puede ayudar a hacer sentencias y filtros complejos cuando se quieren unir tablas. La sentencia compañera que nos ayuda con este proceso es JOIN.

JOIN: Usa los diagramas de Venn para juntar dos tablas. 

*: Significa que va a seleccionar todo sin filtrar campos. 

WHERE: es la sentencia que nos ayuda a filtrar tuplas o registros dependiendo de las características que elegimos. Tiene dos propiedades:
	- LIKE: nos ayuda a traer registros de os cuales solo conocemos una parte.
	- BETWEEN: nos sirve para arrojar registros que esten enmedio de dos por JOIN.

WHERE + NULL se usa:
	- IS NULL
	- IS NOT NULL

ORDER BY: el ordenamiento de los datos dependiendo de los criterios que quieras usar:
	- ASC: Sirve para ordenar ascendente.
	- DESC: Descendiente.
	- LIMIT: limitar la cantidad de resultados.
	- HAVING: similitud con where. Sirve cuando hay duplas agrupadas.

Nested Queries: significan que dentro de un query podemos hacer otro query. Esto sirve para hacer join de tablas, estando una en memoria. También teniendo un query como condicional del otro.

GROUP_cONCAT: toma el resultado del query y lo pone como campo separado por comas.

AS: Cambia el formato en que van a venir los resultados a uno nuevo.

DISTINCT: Evita duplicidad en los valores.

ORDER BY: Sirve para decidir el orden de concatenación del campo. 

Bases de Datos No Relacionables:

	-Clave - valor: Son ideales para almacenar y extraer datos con una clave única. Manejan los diccionarios de manera excepcional. Ejemplos: DynamoDB, Cassandra.
	-Basadas en documentos: Son una implementación de clave valor que varía en la forma semiestructurada en que se trata la información. Ideal para almacenar datos JSON y XML. Ejemplos: MongoDB, Firestore.
	-Basadas en grafos: Basadas en teoría de grafos, sirven para entidades que se encuentran interconectadas por múltiples relaciones. Ideales para almacenar relaciones complejas. Ejemplos: neo4j, TITAN.
	-En memoria: Pueden ser de estructura variada, pero su ventaja radica en la velocidad, ya que al vivir en memoria la extracción de datos es casi inmediata. Ejemplos: Memcached, Redis.
	-Optimizadas para búsquedas: Pueden ser de diversas estructuras, su ventaja radica en que se pueden hacer queries y búsquedas complejas de manera sencilla. Ejemplos: BigQuery, Elasticsearch.

Firebase: Servicio de Google que te deja tercerizar elementos en la nube.

Jerarquia de Datos:
	1. Base de Datos: Contiene toda la información que se quiere guardar. 
	2. Colección: Es igual a las tablas en las bases de datos relacionales. Son objetos que agrupan (Documentos) la información que se desea guardar. 
	3. Documento: Es la información que se quiere guardar. Se guarda en un formato muy parecido al formato JSON (es un lenguaje que se utiliza para comunicarse con diferentes lenguajes o aplicaciones). Los documentos dentro de ellos contienen datos.

TOp Level Collections: son las colecciones que se tienen de inmediato o entrada en el proyecto.

Tipos de Dato en Firestore:
	string: (absorve text, varchar, etc)
	number: (int,float)
	Map: permite hacer un arreglo dentro de otro arreglo (inception)
	Timestamp: para datos de tiempo
	Geopoint latitud y longitud.
	Reference:, hace referencia a otro documento o coleccion.

Big Data: es un concepto que nace de la necesidad de manejar grandes cantidades de datos. La tendencia comenzó con compañías como YouTube al tener la necesidad de guardar y consultar mucha información de manera rápida.

Data Warehouse: trata de guardar cantidades masivas de datos para la posteridad. Allí se guarda todo lo que no está viviendo en la aplicación pero es necesario tenerlo. Debe servir para guardar datos por un largo periodo de tiempo y estos datos se deben poder usar para poder encontrar cuestiones interesantes para el negocio.

BigTable: usa una sola tabla pero no sirve tanto paraahcerc onsultas.

Data Mining: se dedica a minar datos, a extraerlos de donde sea que estén (archivos muertos, base de datos actual, etc…) y hacer sentido de ellos para darles un uso.

ETL:  son las siglas de Extract, Transform, Load (extraer, transformar y cargar). Se trata de tomar datos de archivos muertos y convertirlos en algo que sea de utilidad para el negocio. También ayuda a tomar los datos vivos de la aplicación, transformarlos y guardarlos en un data warehouse periódicamente.

Business Intelligence: es una parte muy importante de las carreras de datos ya que es el punto final del manejo de estos. Su razón de ser es tener la información lista, clara y que tenga todos los elementos para tomar decisiones en una empresa. Es necesario tener una buena sensibilidad por entender el negocio, sus necesidades y la información que puede llevar a tomar decisiones en el momento adecuado al momento de realizar business intelligence.

Machine Learning: tiene significados que varían. Es una serie de técnicas que involucran la inteligencia artificial y la detección de patrones. Machine learning para datos tiene un gran campo de acción y es un paso más allá del business intelligence. Nos ayuda a hacer modelos que encuentran patrones fortuitos encontrando correlaciones inesperadas.

Data Science: es aplicar todas las técnicas de procesamiento de datos. En su manera más pura tiene que ver con gente con un background de estadísticas y ciencias duras.

